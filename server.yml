Description: 
    Koki Mitsunami / Cloud DevOps Engineer Nanodegree
    Deploy a high-availability web app using CloudFormation 

Parameters:
    EnvironmentName: 
        Description: An Environment name that will be prefixed to resources
        Type: String

Resources:
    LBSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            GroupDescription: Allow http to our load balancer
            VpcId: 
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress: 
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress: 
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0

    WebServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            GroupDescription: Allow http to our hosts and SSH from local only
            VpcId: 
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress: 
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress: 
                - IpProtocol: tcp
                  FromPort: 0
                  ToPort: 65535
                  CidrIp: 0.0.0.0/0

    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            UserData:
                Fn::Base64: !Sub |
                  #!/bin/bash
                  apt-get update -y
                  apt-get install unzip awscli -y
                  apt-get install apache2 -y
                  systemctl start apache2.service
                  cd /var/www/html
                  aws s3 cp s3://udacity-project-iac/udacity.zip .
                  unzip -o udacity.zip
            ImageId: ami-05b4756ea95a5d5a7 # Ubuntu18 
            IamInstanceProfile: !Ref ProfileWithRolesForOurApp
            SecurityGroups:
                - Ref: WebServerSecGroup
            InstanceType: t3.medium
            BlockDeviceMappings:
                - DeviceName: "/dev/sdk"
                  Ebs:
                      VolumeSize: '10'
            KeyName: "keypairForEC2"

    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
                - Fn::ImportValue:
                    !Sub "${EnvironmentName}-PRIV-NETS"
#                    !Sub "${EnvironmentName}-PUB-NETS"
            LaunchConfigurationName:
                Ref: WebAppLaunchConfig
            MinSize: '2'
            MaxSize: '4'
            TargetGroupARNs:
                - Ref: WebAppTargetGroup

    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 35
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 30
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId: 
                Fn::ImportValue:
                    Fn::Sub: "${EnvironmentName}-VPCID"

    WebAppLB: 
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Subnets:
                - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
                - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
            SecurityGroups:
                - Ref: LBSecGroup
  
    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
                - Type: forward
                  TargetGroupArn:
                      Ref: WebAppTargetGroup
            LoadBalancerArn:
                Ref: WebAppLB
            Port: '80'
            Protocol: HTTP

    ALBListernerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
                - Type: forward
                  TargetGroupArn: !Ref 'WebAppTargetGroup'
            Conditions: 
                - Field: path-pattern
                  Values: [/]
            ListenerArn: !Ref 'Listener'
            Priority: 1
              
    ProfileWithRolesForOurApp:
        Type: AWS::IAM::InstanceProfile
        Properties: 
            Roles:
              - UdacityS3ReadOnlyEC2

Outputs:
    WebAppLB: 
        Description: Public URL of the LoadBalancer
        Value: !Join [ "", [ "http://", !GetAtt WebAppLB.DNSName ]]
        Export: 
          Name: !Sub ${EnvironmentName}-LB-URL
